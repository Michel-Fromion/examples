/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef STATEMACHINE_H_
#define STATEMACHINE_H_

#include "../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'StateMachine'.
*/

/*! Define number of states in the state enum */

#define STATEMACHINE_STATE_COUNT 3

/*! Define dimension of the state configuration vector for orthogonal states. */
#define STATEMACHINE_MAX_ORTHOGONAL_STATES 1

/*! Define maximum number of time events that can be active at once */
#define STATEMACHINE_MAX_PARALLEL_TIME_EVENTS 1

/*! Define indices of states in the StateConfVector */
#define SCVI_STATEMACHINE_MAIN_REGION_STATEA 0
#define SCVI_STATEMACHINE_MAIN_REGION_STATEB 0
#define SCVI_STATEMACHINE_MAIN_REGION__FINAL_ 0

/*! Enumeration of all states */ 
typedef enum
{
	StateMachine_last_state,
	StateMachine_main_region_StateA,
	StateMachine_main_region_StateB,
	StateMachine_main_region__final_
} StateMachineStates;

/*! Type definition of the data structure for the StateMachineIface interface scope. */
typedef struct
{
	sc_boolean inEvent1_raised;
	sc_boolean inEvent2_raised;
	sc_boolean outEvent1_raised;
	sc_boolean outEvent2_raised;
} StateMachineIface;



/*! Type definition of the data structure for the StateMachineTimeEvents interface scope. */
typedef struct
{
	sc_boolean stateMachine_main_region_StateB_tev0_raised;
} StateMachineTimeEvents;




/*! 
 * Type definition of the data structure for the StateMachine state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	StateMachineStates stateConfVector[STATEMACHINE_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	StateMachineIface iface;
	StateMachineTimeEvents timeEvents;
} StateMachine;



/*! Initializes the StateMachine state machine data structures. Must be called before first usage.*/
extern void stateMachine_init(StateMachine* handle);

/*! Activates the state machine */
extern void stateMachine_enter(StateMachine* handle);

/*! Deactivates the state machine */
extern void stateMachine_exit(StateMachine* handle);

/*! Performs a 'run to completion' step. */
extern void stateMachine_runCycle(StateMachine* handle);

/*! Raises a time event. */
extern void stateMachine_raiseTimeEvent(StateMachine* handle, sc_eventid evid);

/*! Raises the in event 'inEvent1' that is defined in the default interface scope. */ 
extern void stateMachineIface_raise_inEvent1(StateMachine* handle);

/*! Raises the in event 'inEvent2' that is defined in the default interface scope. */ 
extern void stateMachineIface_raise_inEvent2(StateMachine* handle);

/*! Checks if the out event 'outEvent1' that is defined in the default interface scope has been raised. */ 
extern sc_boolean stateMachineIface_israised_outEvent1(const StateMachine* handle);

/*! Checks if the out event 'outEvent2' that is defined in the default interface scope has been raised. */ 
extern sc_boolean stateMachineIface_israised_outEvent2(const StateMachine* handle);


/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean stateMachine_isActive(const StateMachine* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean stateMachine_isFinal(const StateMachine* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean stateMachine_isStateActive(const StateMachine* handle, StateMachineStates state);


#ifdef __cplusplus
}
#endif 

#endif /* STATEMACHINE_H_ */
