testclass TrafficLightTest for statechart TrafficLightCtrl {
	/*
	 * NOTE: If we speak about testing that state X is active, this includes that we check that boolean variables are also checked, whether
	 * they are like they supposed to be or not.
	 * Also note that the testcases build on each other. And every test extends the previous tests.
	 */

	/*
	 * Tests whether the statemachine is in the composite state "off" and in the actual state "Yellow on" or not
	 * and whether the TrafficLight is yellow and the pedestrian request is true or not.
	 */
	@Test
	operation testInitialState () {
		enter

		assert active (TrafficLightCtrl.main_region.off)
		assert active (TrafficLightCtrl.main_region.off.r1.YellowOn)

		assertFlags (false , true , false , false , false , true)
	}
	
	
	/* 
	 * Test whether the statemachine is in the state "YellowOff" after waiting for 500 milliseconds
	 */
	@Test
	operation testYellowOffAfter500ms () {
		enter

		proceed 500 ms

		assert active (TrafficLightCtrl.main_region.off.r1.YellowOff)

		assertFlags (false , false , false , false , false , false)
		assert called synchronize
	}

	/* 
	 * Test whether the statemachine is in the state "YellowOn" after waiting for 1000 milliseconds
	 */
	@Test
	operation testYellowOnAfter1s () {
		enter

		proceed 1s

		assert active (TrafficLightCtrl.main_region.off.r1.YellowOn)

		assertFlags (false , true , false , false , false , true)
		assert called synchronize
	}
	
	/* 
	 * Test whether the statemachine is in the composite state "On" and the actual state "Safe" after raising the Event "onOff" 
	 */
	@Test
	operation testSafeState () {
		enter

		enterSafeState

		assert active (TrafficLightCtrl.main_region.on)
		assert active (TrafficLightCtrl.main_region.on.r1.Safe)

		assertFlags (true , false , false , true , false , false)
	}

	/* 
	 * Test whether the statemachine is in the state "StreetPrepare" after waiting for 10 seconds 
	 */
	@Test
	operation testStreetPrepare () {
		enter

		enterSafeState

		proceed 10 s

		assert active (TrafficLightCtrl.main_region.on.r1.StreetPrepare)
		assertFlags (true , true , false , true , false , false)
		assert called synchronize
	}
	
	/* 
	 * Test whether the statemachine is in the state "StreetGreen" after waiting for 2 more seconds 
	 */
	@Test
	operation testStreetGreen () {
		enter

		testStreetPrepare
		
		proceed 2 s

		assert active (TrafficLightCtrl.main_region.on.r1.StreetGreen)
		assertFlags (false , false , true , true , false , false)
	}
	
	/* 
	 * Test whether the statemachine is in the composite state "PedWaiting" and the actual state "waitOn" after raising the event "pedestrianRequest" 
	 */
	@Test
	operation testPedWaitOn () {
		enter

		testStreetGreen

		raise pedestrianRequest
		proceed 1 cycle

		assert active (TrafficLightCtrl.main_region.on.r1.PedWaiting.r1.waitOn)
		assertFlags (false , false , true , true , false , true)
	}

	/* 
	 * Test whether the statemachine is in the state "waitOff" after waiting for 500 milliseconds.
	 */
	@Test
	operation testPedWaitOff () {
		enter

		testPedWaitOn

		proceed 500 ms

		assert active (TrafficLightCtrl.main_region.on.r1.PedWaiting.r1.waitOff)
		assertFlags (false , false , true , true , false , false)
	}

	/* 
	 * Test whether the statemachine is in the state "StreetAttention" after waiting for 6 and a half more seconds .
	 */
	@Test
	operation testStreetAttention () {
		enter

		testPedWaitOn

		proceed 7 s

		assert active (TrafficLightCtrl.main_region.on.r1.StreetAttention)
		assertFlags (false , true , false , true , false , false)
	}
	
	/* 
	 * Test whether the statemachine is in the state "StreetRed" after waiting for 2 more seconds.
	 */
	@Test
	operation testStreetRed () {
		enter

		testStreetAttention

		proceed 2 s

		assert active (TrafficLightCtrl.main_region.on.r1.StreetRed)
		assertFlags (true , false , false , true , false , false)
	}
	
	
	/* 
	 * Test whether the statemachine is in the state "PedestrianGreen" after waiting for 2 more seconds.
	 */
	@Test
	operation testPedestrianGreen () {
		enter

		testStreetRed

		proceed 2 s

		assert active (TrafficLightCtrl.main_region.on.r1.PedestrianGreen)
		assertFlags (true , false , false , false , true , false)
	}
	
	/* 
	 * Test whether the statemachine is in the state "PedestrianRed" after waiting for 7 more seconds.
	 */
	@Test
	operation testPedestrianRed () {
		enter
		testPedestrianGreen

		proceed 7 s

		assert active (TrafficLightCtrl.main_region.on.r1.PedestrianRed)
		assertFlags (true , false , false , true , false , false)
	}
	
	/* 
	 * Test whether the statemachine is in the state "StreetPrepare" after waiting for 5 more seconds.
	 */
	@Test
	operation testReturnToStreetPrepare () {
		enter
		testPedestrianRed

		proceed 5 s

		assert active (TrafficLightCtrl.main_region.on.r1.StreetPrepare)
		assertFlags (true , true , false , true , false , false)
	}

	/* 
	 * Tests whether the statemachine is in the composite state "off" and the actual state "YellowOn" after raising the Event "onOff".
	 */
	@Test
	operation testReturnToOffState () {
		testStreetAttention

		raise onOff
		proceed 1 cycle

		assert active (TrafficLightCtrl.main_region.off)
		assert active (TrafficLightCtrl.main_region.off.r1.YellowOn)

		assertFlags (false , true , false , false , false , true)
	}

	operation enterSafeState () {
		raise onOff
		proceed 1 cycle
	}
	
	operation assertFlags (trafficRed : boolean , trafficYellow : boolean , trafficGreen : boolean , pedRed : boolean ,
	pedGreen : boolean , pedRequest : boolean) {
		assert TrafficLight.red == trafficRed
		assert TrafficLight.yellow == trafficYellow
		assert TrafficLight.green == trafficGreen
		assert Pedestrian.red == pedRed
		assert Pedestrian.green == pedGreen
		assert Pedestrian.request == pedRequest
	}
}
