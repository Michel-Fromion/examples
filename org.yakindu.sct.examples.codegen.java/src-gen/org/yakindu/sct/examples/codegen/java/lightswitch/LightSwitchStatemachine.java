/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.sct.examples.codegen.java.lightswitch;


public class LightSwitchStatemachine implements ILightSwitchStatemachine {
	protected class SCIUserImpl implements SCIUser {
	
		private boolean on_button;
		
		
		public void raiseOn_button() {
			on_button = true;
			runCycle();
		}
		
		private boolean off_button;
		
		
		public void raiseOff_button() {
			off_button = true;
			runCycle();
		}
		
		private long brightness;
		
		public long getBrightness() {
			return brightness;
		}
		
		public void setBrightness(long value) {
			this.brightness = value;
		}
		
		protected void clearEvents() {
			on_button = false;
			off_button = false;
		}
	}
	
	
	protected SCIUserImpl sCIUser;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Off,
		main_region_On,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	public LightSwitchStatemachine() {
		sCIUser = new SCIUserImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCIUser.setBrightness(0);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		enterSequence_main_region_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Off:
				main_region_Off_react(true);
				break;
			case main_region_On:
				main_region_On_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCIUser.clearEvents();
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Off:
			return stateVector[0] == State.main_region_Off;
		case main_region_On:
			return stateVector[0] == State.main_region_On;
		default:
			return false;
		}
	}
	
	public SCIUser getSCIUser() {
		return sCIUser;
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction_main_region_Off() {
		sCIUser.setBrightness(0);
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_main_region_Off_default() {
		entryAction_main_region_Off();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Off;
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence_main_region_On_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_On;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_main_region_Off() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_main_region_On() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Off:
			exitSequence_main_region_Off();
			break;
		case main_region_On:
			exitSequence_main_region_On();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Off_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Off_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCIUser.on_button) {
					exitSequence_main_region_Off();
					sCIUser.setBrightness(1);
					
					enterSequence_main_region_On_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_On_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCIUser.off_button) {
					exitSequence_main_region_On();
					enterSequence_main_region_Off_default();
				} else {
					if (((sCIUser.on_button) && (sCIUser.getBrightness()<10))) {
						exitSequence_main_region_On();
						sCIUser.setBrightness(sCIUser.getBrightness() + 1);
						
						enterSequence_main_region_On_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
}
